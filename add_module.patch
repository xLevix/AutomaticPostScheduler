Subject: [PATCH] add module
---
Index: src/pages/api/generate.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/api/generate.ts b/src/pages/api/generate.ts
--- a/src/pages/api/generate.ts	(revision 2e75a0edf78cfc37f7197587d170baaa805fb5a8)
+++ b/src/pages/api/generate.ts	(date 1697320161773)
@@ -10,10 +10,19 @@
     };
 
     const payload = {
-        model: "gpt-3.5-turbo-instruct",
-        prompt,
+        model: "gpt-3.5-turbo",
         max_tokens: 2048,
-        stream: true
+        messages: [
+            {
+                role: "system",
+                content: "You are assistant writing posts to social media like Instagram, Twitter, and Linkedin. Write the post in the language that user asked the question. Limit your post to a maximum of 2200 characters; it can be less if you want."
+            },
+            {
+                role: "user",
+                content: prompt
+            }
+        ],
+        stream: true,
     };
 
     const stream = await OpenAIStream(payload);
Index: src/utils/OpenAIStream.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/utils/OpenAIStream.ts b/src/utils/OpenAIStream.ts
--- a/src/utils/OpenAIStream.ts	(revision 2e75a0edf78cfc37f7197587d170baaa805fb5a8)
+++ b/src/utils/OpenAIStream.ts	(date 1697320161435)
@@ -5,8 +5,10 @@
     const decoder = new TextDecoder();
 
     let counter = 0;
+    
+    console.log("Sending payload2137:", JSON.stringify(payload))
 
-    const res = await fetch("https://api.openai.com/v1/completions", {
+    const res = await fetch("https://api.openai.com/v1/chat/completions", {
         headers: {
             "Content-Type": "application/json",
             Authorization: `Bearer ${process.env.OPENAI_API_KEY ?? ""}`,
@@ -24,20 +26,27 @@
                         controller.close();
                         return;
                     }
+
                     try {
                         const json = JSON.parse(data);
-                        const text = json.choices[0].text;
-                        if (counter < 2 && (text.match(/\n/) || []).length) {
-                            return;
-                        }
-                        const queue = encoder.encode(text);
-                        controller.enqueue(queue);
-                        counter++;
+                        console.log("Received data:", json);
+                        const choices = json.choices;
+                        if (choices.length > 0) {
+                            const delta = choices[0].delta;
+                            // Dodajemy dodatkowe sprawdzenie tutaj
+                            if (delta && delta.content && (counter >= 2 || delta.content.match(/\n/))) {
+                                const queue = encoder.encode(delta.content);
+                                controller.enqueue(queue);
+                                counter++;
+                            }
+                        }
                     } catch (e) {
                         controller.error(e);
                     }
+
                 }
             }
+
 
             // stream response (SSE) from OpenAI may be fragmented into multiple chunks
             // this ensures we properly read chunks & invoke an event for each SSE event stream
